Parity checks

0000	
0001	
0010	
0011	

0100	
0101	
0110	
0111	

1000	
1001	
1010	
1011	

1100	
1101	
1110	
1111	



128 bits / 6 bits (base64) = 21 modulus 2
			   = 22 base64 characters
			   = 132 bits (4 remaining, unused)

First 4 x bytes = 5 1/3 base 64 chars.

Byte 1

1
2
3
4
5
6
7
8

Byte 2

1
2
3
4
5
6
7
8

Byte 3

1
2
3
4
5
6
7
8

Byte 4

1
2
3
4
5
6
7
8

Byte 5

1
2
3
4
5
6
7
8

Byte 6

1
2
3
4
5
6
7
8

Byte 7

1
2
3
4
5
6
7
8

Byte 8

1
2
3
4
5
6
7
8

Byte 9

1
2
3
4
5
6
7
8

Byte 10

1
2
3
4
5
6
7
8

Byte 11

1
2
3
4
5
6
7
8

Byte 12

1
2
3
4
5
6
7
8

Byte 13

1
2
3
4
5
6
7
8

Byte 14

1
2
3
4
5
6
7
8

Byte 15

1
2
3
4
5
6
7
8

Byte 16			Base 64 char no. 21

Bits: 121 to 126	Base 64 bits

1			1 ]
2			2 ]
3			3 ] --- Covered by base 64 char no. 21
4			4 ]
5 			5 ]
6 			6 ]

			Base 64 char no. 22, bits 1 to 4

			Spare bits for checking all 128 bits:

			1 ] Bytes 1-4    --- parity check
			2 ] Bytes 5-8    --- parity check
			3 ] Bytes 9-12   --- parity check
			4 ] Bytes 13-16  --- parity check

Bits: 127 to 128

			Base 64 char no. 22, bits 5 & 6

7 			5 ]
8 			6 ] --- Base 64 char no. 22

1 in 16 chance of passing the parity check if the string is tampered with

Method:

1) Convert last base 64 character to byte / bits
2) Leave 7,8 as they are (all zeros)
3) Leave 1,2 as they are
4) Change bits 4 to 6 according to the parity of bytes 1-4, 5-8, 9-12 and 13-16
